plugins {
	id 'org.jetbrains.kotlin.jvm' version '1.9.25'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.25'
}

group = 'hana.lovepet'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

//spring-cloud - start
ext {
	set('springCloudVersion', "2025.0.0")
}
//spring-cloud - end

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'


	//kafka - start
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springframework.retry:spring-retry'

	testImplementation 'org.springframework.kafka:spring-kafka-test'
	//kafka - end

	// redis - start
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	// redid - end

	testImplementation 'org.mockito.kotlin:mockito-kotlin:5.2.1'

	// actuator & prometheus - start
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	// actuator & prometheus - end

	// eureka client
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll '-Xjsr305=strict'
	}
}

allOpen {
	annotation 'jakarta.persistence.Entity'
	annotation 'jakarta.persistence.MappedSuperclass'
	annotation 'jakarta.persistence.Embeddable'
}

tasks.named('test') {
	useJUnitPlatform()
}

//spring-cloud - start
dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}
//spring-cloud - end
